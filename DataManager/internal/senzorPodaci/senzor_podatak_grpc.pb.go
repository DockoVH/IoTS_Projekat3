// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: senzor_podatak.proto

package senzorPodaci

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SenzorPodaci_VratiSenzorPodatak_FullMethodName    = "/SenzorPodaci/VratiSenzorPodatak"
	SenzorPodaci_SviSenzorPodaci_FullMethodName       = "/SenzorPodaci/SviSenzorPodaci"
	SenzorPodaci_DodajSenzorPodatak_FullMethodName    = "/SenzorPodaci/DodajSenzorPodatak"
	SenzorPodaci_IzmeniSenzorPodatak_FullMethodName   = "/SenzorPodaci/IzmeniSenzorPodatak"
	SenzorPodaci_IzbrisiSenzorPodatak_FullMethodName  = "/SenzorPodaci/IzbrisiSenzorPodatak"
	SenzorPodaci_SviSenzorPodaciPeriod_FullMethodName = "/SenzorPodaci/SviSenzorPodaciPeriod"
)

// SenzorPodaciClient is the client API for SenzorPodaci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SenzorPodaciClient interface {
	VratiSenzorPodatak(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*SenzorPodatak, error)
	SviSenzorPodaci(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SenzorPodatak], error)
	DodajSenzorPodatak(ctx context.Context, in *SenzorPodatak, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	IzmeniSenzorPodatak(ctx context.Context, in *SenzorPodatak, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	IzbrisiSenzorPodatak(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	SviSenzorPodaciPeriod(ctx context.Context, in *VremenskiPeriod, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SenzorPodatak], error)
}

type senzorPodaciClient struct {
	cc grpc.ClientConnInterface
}

func NewSenzorPodaciClient(cc grpc.ClientConnInterface) SenzorPodaciClient {
	return &senzorPodaciClient{cc}
}

func (c *senzorPodaciClient) VratiSenzorPodatak(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*SenzorPodatak, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SenzorPodatak)
	err := c.cc.Invoke(ctx, SenzorPodaci_VratiSenzorPodatak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senzorPodaciClient) SviSenzorPodaci(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SenzorPodatak], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SenzorPodaci_ServiceDesc.Streams[0], SenzorPodaci_SviSenzorPodaci_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, SenzorPodatak]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SenzorPodaci_SviSenzorPodaciClient = grpc.ServerStreamingClient[SenzorPodatak]

func (c *senzorPodaciClient) DodajSenzorPodatak(ctx context.Context, in *SenzorPodatak, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, SenzorPodaci_DodajSenzorPodatak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senzorPodaciClient) IzmeniSenzorPodatak(ctx context.Context, in *SenzorPodatak, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, SenzorPodaci_IzmeniSenzorPodatak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senzorPodaciClient) IzbrisiSenzorPodatak(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, SenzorPodaci_IzbrisiSenzorPodatak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senzorPodaciClient) SviSenzorPodaciPeriod(ctx context.Context, in *VremenskiPeriod, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SenzorPodatak], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SenzorPodaci_ServiceDesc.Streams[1], SenzorPodaci_SviSenzorPodaciPeriod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VremenskiPeriod, SenzorPodatak]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SenzorPodaci_SviSenzorPodaciPeriodClient = grpc.ServerStreamingClient[SenzorPodatak]

// SenzorPodaciServer is the server API for SenzorPodaci service.
// All implementations must embed UnimplementedSenzorPodaciServer
// for forward compatibility.
type SenzorPodaciServer interface {
	VratiSenzorPodatak(context.Context, *wrapperspb.Int32Value) (*SenzorPodatak, error)
	SviSenzorPodaci(*emptypb.Empty, grpc.ServerStreamingServer[SenzorPodatak]) error
	DodajSenzorPodatak(context.Context, *SenzorPodatak) (*wrapperspb.BoolValue, error)
	IzmeniSenzorPodatak(context.Context, *SenzorPodatak) (*wrapperspb.BoolValue, error)
	IzbrisiSenzorPodatak(context.Context, *wrapperspb.Int32Value) (*wrapperspb.BoolValue, error)
	SviSenzorPodaciPeriod(*VremenskiPeriod, grpc.ServerStreamingServer[SenzorPodatak]) error
	mustEmbedUnimplementedSenzorPodaciServer()
}

// UnimplementedSenzorPodaciServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSenzorPodaciServer struct{}

func (UnimplementedSenzorPodaciServer) VratiSenzorPodatak(context.Context, *wrapperspb.Int32Value) (*SenzorPodatak, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VratiSenzorPodatak not implemented")
}
func (UnimplementedSenzorPodaciServer) SviSenzorPodaci(*emptypb.Empty, grpc.ServerStreamingServer[SenzorPodatak]) error {
	return status.Errorf(codes.Unimplemented, "method SviSenzorPodaci not implemented")
}
func (UnimplementedSenzorPodaciServer) DodajSenzorPodatak(context.Context, *SenzorPodatak) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DodajSenzorPodatak not implemented")
}
func (UnimplementedSenzorPodaciServer) IzmeniSenzorPodatak(context.Context, *SenzorPodatak) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IzmeniSenzorPodatak not implemented")
}
func (UnimplementedSenzorPodaciServer) IzbrisiSenzorPodatak(context.Context, *wrapperspb.Int32Value) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IzbrisiSenzorPodatak not implemented")
}
func (UnimplementedSenzorPodaciServer) SviSenzorPodaciPeriod(*VremenskiPeriod, grpc.ServerStreamingServer[SenzorPodatak]) error {
	return status.Errorf(codes.Unimplemented, "method SviSenzorPodaciPeriod not implemented")
}
func (UnimplementedSenzorPodaciServer) mustEmbedUnimplementedSenzorPodaciServer() {}
func (UnimplementedSenzorPodaciServer) testEmbeddedByValue()                      {}

// UnsafeSenzorPodaciServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SenzorPodaciServer will
// result in compilation errors.
type UnsafeSenzorPodaciServer interface {
	mustEmbedUnimplementedSenzorPodaciServer()
}

func RegisterSenzorPodaciServer(s grpc.ServiceRegistrar, srv SenzorPodaciServer) {
	// If the following call pancis, it indicates UnimplementedSenzorPodaciServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SenzorPodaci_ServiceDesc, srv)
}

func _SenzorPodaci_VratiSenzorPodatak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenzorPodaciServer).VratiSenzorPodatak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SenzorPodaci_VratiSenzorPodatak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenzorPodaciServer).VratiSenzorPodatak(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenzorPodaci_SviSenzorPodaci_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SenzorPodaciServer).SviSenzorPodaci(m, &grpc.GenericServerStream[emptypb.Empty, SenzorPodatak]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SenzorPodaci_SviSenzorPodaciServer = grpc.ServerStreamingServer[SenzorPodatak]

func _SenzorPodaci_DodajSenzorPodatak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SenzorPodatak)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenzorPodaciServer).DodajSenzorPodatak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SenzorPodaci_DodajSenzorPodatak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenzorPodaciServer).DodajSenzorPodatak(ctx, req.(*SenzorPodatak))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenzorPodaci_IzmeniSenzorPodatak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SenzorPodatak)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenzorPodaciServer).IzmeniSenzorPodatak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SenzorPodaci_IzmeniSenzorPodatak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenzorPodaciServer).IzmeniSenzorPodatak(ctx, req.(*SenzorPodatak))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenzorPodaci_IzbrisiSenzorPodatak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenzorPodaciServer).IzbrisiSenzorPodatak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SenzorPodaci_IzbrisiSenzorPodatak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenzorPodaciServer).IzbrisiSenzorPodatak(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenzorPodaci_SviSenzorPodaciPeriod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VremenskiPeriod)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SenzorPodaciServer).SviSenzorPodaciPeriod(m, &grpc.GenericServerStream[VremenskiPeriod, SenzorPodatak]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SenzorPodaci_SviSenzorPodaciPeriodServer = grpc.ServerStreamingServer[SenzorPodatak]

// SenzorPodaci_ServiceDesc is the grpc.ServiceDesc for SenzorPodaci service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SenzorPodaci_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SenzorPodaci",
	HandlerType: (*SenzorPodaciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VratiSenzorPodatak",
			Handler:    _SenzorPodaci_VratiSenzorPodatak_Handler,
		},
		{
			MethodName: "DodajSenzorPodatak",
			Handler:    _SenzorPodaci_DodajSenzorPodatak_Handler,
		},
		{
			MethodName: "IzmeniSenzorPodatak",
			Handler:    _SenzorPodaci_IzmeniSenzorPodatak_Handler,
		},
		{
			MethodName: "IzbrisiSenzorPodatak",
			Handler:    _SenzorPodaci_IzbrisiSenzorPodatak_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SviSenzorPodaci",
			Handler:       _SenzorPodaci_SviSenzorPodaci_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SviSenzorPodaciPeriod",
			Handler:       _SenzorPodaci_SviSenzorPodaciPeriod_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "senzor_podatak.proto",
}
